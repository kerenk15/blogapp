{"posts":[{"title":"AngularJS - Controllers","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Controllers.md","htmlPath":"data/posts/html/AngularJS - Controllers.html","description":"In Angular, a Controller is a JavaScript constructor function that is used to augment the Angular Scope. When a Controller is attached to the DOM via the ng-controller directive, Angular will instantiate a new Controller object, using the specified Controller's constructor function. A new child scope will be available as an injectable parameter to the Controller's constructor function as $scope.","mdSource":"<h2>Controllers - Extra topics</h2>&#10;<hr/>&#10;<h3>$scope and functions on $scope</h3>&#10;<p>The <code>$scope</code> basically serves as the data model.</p>&#10;<p>More info from the Angular website:</p>&#10;<ul>&#10;<li><p>Scopes provide APIs (<code>$watch</code>) to observe model mutations.</p>&#10;</li>&#10;<li><p>Scopes provide APIs (<code>$apply</code>) to propagate any model changes through the system into the view from outside of the &#8220;Angular realm&#8221; (Controllers, Services, Angular event handlers).</p>&#10;</li>&#10;<li><p>Scopes can be nested to limit access to the properties of application components while providing access to shared model properties. Nested scopes are either <strong>child scopes</strong> or <strong>isolate scopes</strong>. A <strong>child scope</strong> (prototypically) inherits properties from its parent scope. An <strong>isolate scope</strong> does not.</p>&#10;</li>&#10;<li><p>Scopes provide context against which expressions are evaluated. For example, a <code>{{userName}}</code> expression is meaningless, unless it is evaluated against a specific scope which defines the <code>userName</code> property.</p>&#10;</li>&#10;</ul>&#10;<hr/>&#10;<h3>Prototypal inheritance</h3>&#10;<p>There is always one root scope, but chlid scopes can exist, and they inherit (prototypically) from their parent scope(s):</p>&#10;<pre><code class=\"handlebars\">&lt;div ng-app=&#34;scopeExample&#34;&gt;&#10;    &lt;div class=&#34;show-scope-demo&#34;&gt;&#10;        &lt;div ng-controller=&#34;GreetController&#34;&gt;&#10;            Hello {{name}}!&#10;        &lt;/div&gt;&#10;&#10;        &lt;div ng-controller=&#34;ListController&#34;&gt;&#10;            &lt;ol&gt;&#10;                &lt;li ng-repeat=&#34;name in names&#34;&gt;&#10;                    {{name}} from {{department}}&#10;                &lt;/li&gt;&#10;            &lt;/ol&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;</code></pre>&#10;<hr/>&#10;<pre><code class=\"js\">angular.module('scopeExample', [])&#10;&#10;.controller('GreetController', ['$scope', '$rootScope', &#10;    function ($scope, $rootScope) {&#10;        $scope.name = 'World';&#10;        $rootScope.department = 'Angular';&#10;    }&#10;]);&#10;&#10;.controller('ListController', ['$scope',&#10;    function ($scope) {&#10;        $scope.names = ['Igor', 'Misko', 'Vojta'];&#10;    }&#10;]);&#10;</code></pre>&#10;<hr/>&#10;<pre><code class=\"css\">.show-scope-demo.ng-scope,&#10;.show-scope-demo .ng-scope  {&#10;    border: 1px solid red;&#10;    margin: 3px;&#10;}&#10;</code></pre>&#10;<hr/>&#10;<h3>Passing by reference/value</h3>&#10;<p>Remember that there is difference between this:</p>&#10;<pre><code class=\"js\">var str = 'string';&#10;&#10;function updateString(strParam) {&#10;    strParam = 'other string';&#10;}&#10;updateString(str);&#10;console.log(str);&#10;</code></pre>&#10;<p>And this:</p>&#10;<pre><code class=\"js\">var strObject = {&#10;    str: 'string'&#10;};&#10;function updateString(strParam) {&#10;    strParam.str = 'other string';&#10;}&#10;updateString(strObject);&#10;console.log(strObject.str);&#10;</code></pre>&#10;<hr/>&#10;<p>So too, this:</p>&#10;<pre><code class=\"handlebars\">&lt;div ng-app=&#34;scopeExample&#34;&gt;&#10;    &lt;div ng-controller=&#34;ParentController&#34;&gt;&#10;        &lt;input type=&#34;text&#34; ng-model=&#34;name&#34;&gt;&#10;        Hello {{name}}!&#10;        &lt;div ng-controller=&#34;ChildController&#34;&gt;&#10;            &lt;input type=&#34;text&#34; ng-model=&#34;name&#34;&gt;&#10;            Hello {{name}}!&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;</code></pre>&#10;<pre><code class=\"js\">angular.module('scopeExample', [])&#10;    .controller('ParentController', ['$scope',&#10;        function ($scope) {&#10;            $scope.name = 'World';&#10;        }&#10;    ])&#10;    .controller('ChildController', ['$scope',&#10;        function ($scope) { /* ... */ }&#10;    ]);&#10;</code></pre>&#10;<hr/>&#10;<p>is different than this:</p>&#10;<pre><code class=\"handlebars\">&lt;div ng-app=&#34;scopeExample&#34;&gt;&#10;    &lt;div ng-controller=&#34;ParentController&#34;&gt;&#10;        &lt;input type=&#34;text&#34; ng-model=&#34;data.name&#34;&gt;&#10;        Hello {{data.name}}!&#10;        &lt;div ng-controller=&#34;ChildController&#34;&gt;&#10;            &lt;input type=&#34;text&#34; ng-model=&#34;name&#34;&gt;&#10;            Hello {{data.name}}!&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;</code></pre>&#10;<pre><code class=\"js\">angular.module('scopeExample', [])&#10;    .controller('ParentController', ['$scope',&#10;        function ($scope) {&#10;            $scope.data = {&#10;                name: 'World'&#10;            };&#10;        }&#10;    ])&#10;    .controller('ChildController', ['$scope',&#10;        function ($scope) { /* ... */ }&#10;    ]);&#10;</code></pre>&#10;<hr/>&#10;<h3>&#8220;<code>Controller as</code>&#8220; syntax</h3>&#10;<p><a href=\"https://docs.angularjs.org/api/ng/directive/ngController\">AngularJS.org - ngController</a><br/><a href=\"http://plnkr.co/edit/EndHxw6QcY3dKAZZhEXD?p=preview\">Controller As - Example</a></p>&#10;<hr/>&#10;<h3>Built-In <code>$scope</code> methods</h3>&#10;<p><strong><code>$watch</code></strong></p>&#10;<blockquote>&#10;<p>Allows listening to variables changes.</p>&#10;</blockquote>&#10;<pre><code class=\"js\">$scope.$watch(&#10;    'sampleVar',&#10;&#10;    // This is the change listener, called when the value returned from the above function changes&#10;    function(newValue, oldValue) {&#10;        if ( newValue !== oldValue ) {&#10;            console.log(newValue, oldValue);&#10;            $scope.sampleVar2 = $scope.sampleVar + $scope.sampleVar;&#10;        }&#10;    },&#10;    false&#10;);&#10;</code></pre>&#10;<ul>&#10;<li>Affects performance if used a lot or if doing heavy lifting. Don&#8217;t abuse it! </li>&#10;</ul>&#10;"},{"title":"AngularJS - Modules","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Modules.md","htmlPath":"data/posts/html/AngularJS - Modules.html","description":"You can think of a module as a container for the different parts of your app â€“ controllers, services, filters, directives, etc. Most applications have a main method that instantiates and wires together the different parts of the application. Angular apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped.","mdSource":"<h2>Modules</h2>&#10;<h3>What is a module?</h3>&#10;<blockquote>&#10;<p>You can think of a module as a container for the different parts of your app &#8211; Controllers, Services, Filters, Directives, etc.</p>&#10;</blockquote>&#10;<hr/>&#10;<h3>Why do we need it?</h3>&#10;<p>Most applications have a main method that instantiates and wires together the different parts of the application.</p>&#10;<p>Angular apps don&#8217;t have a main method. Instead, modules declaratively specify how an application should be bootstrapped. There are several advantages to this approach:</p>&#10;<ul>&#10;<li>The declarative process is easier to understand.</li>&#10;<li>You can package code as reusable modules.</li>&#10;<li>The modules can be loaded in any order (or even in parallel) because modules delay execution.</li>&#10;<li>Unit tests only have to load relevant modules, which keeps them fast.</li>&#10;<li>End-to-end tests can use modules to override configuration.</li>&#10;</ul>&#10;<hr/>&#10;<h3>Recommended Setup</h3>&#10;<p>Break your application to multiple modules:</p>&#10;<ul>&#10;<li>A module for each feature</li>&#10;<li>A module for each reusable component (especially Directives and Filters)</li>&#10;<li>An application level module which depends on the above modules and contains any initialization code.</li>&#10;</ul>&#10;<hr/>&#10;<h3>Module setup</h3>&#10;<p>HTML:</p>&#10;<pre><code class=\"handlebars\">&lt;div ng-app=&#34;myApp&#34;&gt;&#10;    &lt;div&gt;&#10;        {{ 'World' | greet }}&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;</code></pre>&#10;<p>JS:</p>&#10;<pre><code class=\"js\">// Declare a module&#10;var app = angular.module('myApp', []);&#10;&#10;// Configure the module&#10;// Adding a greeting filter&#10;app.filter('greet', function () {&#10;    return function (name) {&#10;        return 'Hello, ' + name + '!';&#10;    };&#10;});&#10;</code></pre>&#10;<hr/>&#10;<h3>Dependency injection in modules</h3>&#10;<pre><code class=\"js\">var app = angular.module('myApp', ['Module2', 'Module3']);&#10;</code></pre>&#10;<p>That&#8217;s how you include other modules as dependencies of the main one.</p>&#10;<ul>&#10;<li><a href=\"https://docs.angularjs.org/guide/module\">More info on modules</a></li>&#10;</ul>&#10;"},{"title":"AngularJS - Routes","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Routes.md","htmlPath":"data/posts/html/AngularJS - Routes.html","description":"AngularJS routes enable you to create different URLs for different content in your application. Having different URLs for different content enables the user to bookmark URLs to specific content, and send those URLs to friends etc. In AngularJS each such bookmarkable URL is called a route."},{"title":"AngularJS - Services","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Services.md","htmlPath":"data/posts/html/AngularJS - Services.html","description":"Angular services are substitutable objects that are wired together using dependency injection (DI). You can use services to organize and share code across your app. Angular offers several useful services (like $http), but for most applications you'll also want to create your own.","mdSource":"<h2>Services</h2>&#10;<hr/>&#10;<blockquote>&#10;<p>Services are probably the easiest piece to understand in Angular. They&#8217;re cross-application, and easy to inject and use.  A service is a nice name for an Angular singleton.</p>&#10;</blockquote>&#10;<hr/>&#10;<h3>Creating a Service</h3>&#10;<p>We use the same pattern we&#8217;ve seen a lot:</p>&#10;<pre><code class=\"js\">myApp.factory('myService', ['$location', function ($location) {&#10;    function saveFn(){&#10;&#10;    }&#10;&#10;    function deleteFn(){&#10;&#10;    }&#10;&#10;    return {&#10;        save: saveFn,&#10;        delete: deleteFn&#10;    }&#10;}&#10;}]);&#10;</code></pre>&#10;<hr/>&#10;<h3><code>service</code> vs. <code>factory</code></h3>&#10;<p>Sometimes, you&#8217;ll see this:</p>&#10;<pre><code class=\"js\">myApp.service('myService', [function () {}])&#10;</code></pre>&#10;<p>and sometimes this:</p>&#10;<pre><code class=\"js\">myApp.factory('myService', [function () {}]);&#10;</code></pre>&#10;<p>So what&#8217;s the difference?</p>&#10;<ul>&#10;<li><a href=\"http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory\">StackOverflow - angular.service vs angular.factory</a></li>&#10;</ul>&#10;<p><strong>Bottom line:</strong></p>&#10;<ul>&#10;<li>Any time you WOULD use <code>new</code>, use <code>service</code></li>&#10;<li>And if you WOULDN&#8217;T use <code>new</code>, use <code>factory</code></li>&#10;</ul>&#10;<hr/>&#10;<h3>Use-cases for services</h3>&#10;<ul>&#10;<li>Utility functions</li>&#10;<li>Server communication encapsulation</li>&#10;<li>Managing your model across your app</li>&#10;</ul>&#10;"},{"title":"Grunt - Custom Tasks","author":"Alex Ilyaev","date":"1418162400000","tags":["Grunt","Tools"],"mdPath":"data/posts/md/Grunt - Custom Tasks.md","htmlPath":"data/posts/html/Grunt - Custom Tasks.html","description":"Tasks are grunt's bread and butter. The stuff you do most often, like jshint or nodeunit. Every time Grunt is run, you specify one or more tasks to run, which tells Grunt what you'd like it to do. You can go crazy with tasks. If your tasks don't follow the 'multi task' structure, use a custom task."},{"title":"Grunt - Intro","author":"Alex Ilyaev","date":"1418162400000","tags":["Grunt","Tools"],"mdPath":"data/posts/md/Grunt - Intro.md","htmlPath":"data/posts/html/Grunt - Intro.html","description":"Grunt is a task-based command line build tool for JavaScript projects. Hereâ€™s the idea: when working on a JavaScript project, there are a bunch of things youâ€™ll want to do regularly. Like what, you ask? Well, like concatenating given files, running JSHint on your code, running tests, or minifying your scripts."},{"title":"jQuery - Events, AJAX","author":"Amit Choukroun","date":"1417557600000","tags":["JavaScript","jQuery"],"mdPath":"data/posts/md/jQuery - Events, AJAX.md","htmlPath":"data/posts/html/jQuery - Events, AJAX.html","description":"jQuery Event methods trigger or attach a function to an event handler for the selected elements. These methods are used to register behaviors to take effect when the user interacts with the browser, and to further manipulate those registered behaviors.","mdSource":"<h2>Events</h2>&#10;<hr/>&#10;<h3>Mouse Events</h3>&#10;<h4><code>.click()</code> &amp; <code>.dblclick()</code></h4>&#10;<p>Bind an event handler to the &#8220;click&#8221; JavaScript event, or trigger that event on an element.</p>&#10;<pre><code class=\"js\">$( &#34;#other&#34; ).click(function() {&#10;  $( &#34;#target&#34; ).click();&#10;});&#10;</code></pre>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/pvjoPZ\">http://codepen.io/netcraft/pen/pvjoPZ</a></p>&#10;<hr/>&#10;<h4><code>.hover()</code></h4>&#10;<p>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements <code>.mouseenter() .mouseleave()</code>.</p>&#10;<pre><code class=\"js\">$( &#34;li.fade&#34; ).hover(function() {&#10;  $( this ).fadeOut( 100 );&#10;  $( this ).fadeIn( 500 );&#10;});&#10;</code></pre>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/wBKveP\">http://codepen.io/netcraft/pen/wBKveP</a></p>&#10;<hr/>&#10;<h3>Keyboard Events</h3>&#10;<h4><code>.keydown()</code> &amp; <code>.keypress()</code> &amp; <code>.keyup()</code></h4>&#10;<p>Bind an event handler to the &#8220;keydown&#8221;/&#8220;keypress&#8221;/&#8220;keyup&#8221; JavaScript event, or trigger that event on an element.</p>&#10;<pre><code class=\"js\">$( &#34;#target&#34; ).keydown(function() {&#10;  alert( &#34;Handler for .keydown() called.&#34; );&#10;});&#10;</code></pre>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/jEbOGK\">http://codepen.io/netcraft/pen/jEbOGK</a></p>&#10;<hr/>&#10;<h3>Form Events</h3>&#10;<h4><code>.change()</code></h4>&#10;<p>Bind an event handler to the &#8220;change&#8221; JavaScript event, or trigger that event on an element.</p>&#10;<pre><code class=\"js\">$( &#34;.target&#34; ).change(function() {&#10;  alert( &#34;Handler for .change() called.&#34; );&#10;});&#10;</code></pre>&#10;<hr/>&#10;<h4><code>.submit()</code></h4>&#10;<p>Bind an event handler to the &#8220;submit&#8221; JavaScript event, or trigger that event on an element.</p>&#10;<pre><code class=\"js\">$( &#34;#target&#34; ).submit(function( event ) {&#10;  alert( &#34;Handler for .submit() called.&#34; );&#10;  event.preventDefault();&#10;});&#10;</code></pre>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/EaVajP\">http://codepen.io/netcraft/pen/EaVajP</a></p>&#10;<hr/>&#10;<h4>Alias to <code>on()</code></h4>&#10;<pre><code class=\"js\">jQuery.each( (&#34;blur focus focusin focusout load resize scroll unload click &#34; +&#10;  &#34;dblclick mousedown mouseup mousemove mouseover mouseout mouseenter &#34; +&#10;  &#34;mouseleave change select submit keydown keypress keyup error &#34; +&#10;  &#34;contextmenu&#34;).split(&#34; &#34;), function( i, name ) {&#10;&#10;  // Handle event binding&#10;  jQuery.fn[ name ] = function( data, fn ) {&#10;    return arguments.length &gt; 0 ?&#10;      this.on( name, null, data, fn ) :&#10;      this.trigger( name );&#10;  };&#10;});&#10;</code></pre>&#10;<hr/>&#10;<h4><code>.off()</code> &amp; <code>.once()</code></h4>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/empWBR?editors=001\">http://codepen.io/netcraft/pen/empWBR?editors=001</a></p>&#10;<hr/>&#10;<h4>Pub/Sub register custom events</h4>&#10;<pre><code class=\"js\">$('.item').on('customEvent', function() {&#10;  // do something&#10;});&#10;&#10;$('.item').trigger('customEvent');&#10;</code></pre>&#10;<hr/>&#10;<h4>Event delegation with <code>.on()</code></h4>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/yyeoJw?editors=001\">http://codepen.io/netcraft/pen/yyeoJw?editors=001</a></p>&#10;<hr/>&#10;<blockquote>&#10;<p>Exercise:<br/><a href=\"http://codepen.io/netcraft/pen/myeYzN?editors=001\">jQuery Events</a></p>&#10;</blockquote>&#10;<hr/>&#10;<blockquote>&#10;<p>Solution<br/><a href=\"http://codepen.io/netcraft/pen/wBKbQM?editors=001\">jQuery Events Solution</a></p>&#10;</blockquote>&#10;<hr/>&#10;<h2>Ajax</h2>&#10;<hr/>&#10;<h3><code>jQuery.get()</code> &amp; <code>jQuery.post()</code> &amp; <code>jQuery.getJSON()</code></h3>&#10;<p>Load data from the server using an HTTP GET/POST/JSONP request</p>&#10;<pre><code class=\"js\">var jqxhr = $.get( &#34;example.php&#34;, function() {&#10;  alert( &#34;success&#34; );&#10;})&#10;  .done(function() {&#10;    alert( &#34;second success&#34; );&#10;  })&#10;  .fail(function() {&#10;    alert( &#34;error&#34; );&#10;  })&#10;  .always(function() {&#10;    alert( &#34;finished&#34; );&#10;  });&#10;</code></pre>&#10;<pre><code class=\"js\">jQuery.get( url [, data ] [, success ] [, dataType ] )&#10;jQuery.post( url [, data ] [, success ] [, dataType ] )&#10;jQuery.getJSON( url [, data ] [, success ] )&#10;</code></pre>&#10;<hr/>&#10;<h3><code>jQuery.ajax([ settings ])</code></h3>&#10;<p>Perform an asynchronous HTTP (Ajax) request.</p>&#10;<pre><code class=\"js\">var request = $.ajax({&#10;  url: &#34;script.php&#34;,&#10;  type: &#34;POST&#34;,&#10;  data: { id : menuId },&#10;  dataType: &#34;html&#34;&#10;});&#10;</code></pre>&#10;<p><strong>settings:</strong></p>&#10;<ul>&#10;<li>async</li>&#10;<li>crossDomain</li>&#10;<li>data</li>&#10;<li>dataType</li>&#10;<li>jsonp</li>&#10;<li>more &#8230;</li>&#10;</ul>&#10;<p>Example:<br/><a href=\"http://codepen.io/netcraft/pen/EaVVVM\">http://codepen.io/netcraft/pen/EaVVVM</a></p>&#10;<hr/>&#10;<h3><code>.load()</code></h3>&#10;<p>Load data from the server and place the returned HTML into the matched element.</p>&#10;<h3><code>jQuery.param()</code></h3>&#10;<p>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.</p>&#10;<hr/>&#10;<blockquote>&#10;<p>Exercise<br/><a href=\"http://codepen.io/netcraft/pen/wBKJrR?editors=001\">jQuery Ajax</a></p>&#10;</blockquote>&#10;<hr/>&#10;<blockquote>&#10;<p>Solution:<br/><a href=\"http://codepen.io/netcraft/pen/myeYZd?editors=001\">jQuery Ajax Solution</a></p>&#10;</blockquote>&#10;<p>&lt;!-- In-Class Exercises --&gt;&#10;</p>&#10;"},{"title":"jQuery - Selectors, DOM","author":"Amit Choukroun","date":"1417384800000","tags":["JavaScript","jQuery"],"mdPath":"data/posts/md/jQuery - Selectors, DOM.md","htmlPath":"data/posts/html/jQuery - Selectors, DOM.html","description":"Borrowing from CSS 1â€“3, and then adding its own, jQuery offers a powerful set of tools for matching a set of elements in a document. There are also methods to manipulate the DOM in some manner. A few of those methods simply change one of the attributes of an element, while others set an element's style properties or modify entire elements."}]}